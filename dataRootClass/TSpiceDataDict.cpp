//
// File generated by rootcint at Fri Mar 28 14:26:50 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TSpiceDataDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TSpiceDataDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TSpiceData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TSpiceData(void *p = 0);
   static void *newArray_TSpiceData(Long_t size, void *p);
   static void delete_TSpiceData(void *p);
   static void deleteArray_TSpiceData(void *p);
   static void destruct_TSpiceData(void *p);
   static void streamer_TSpiceData(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TSpiceData*)
   {
      ::TSpiceData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TSpiceData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TSpiceData", ::TSpiceData::Class_Version(), "./TSpiceData.h", 27,
                  typeid(::TSpiceData), DefineBehavior(ptr, ptr),
                  &::TSpiceData::Dictionary, isa_proxy, 0,
                  sizeof(::TSpiceData) );
      instance.SetNew(&new_TSpiceData);
      instance.SetNewArray(&newArray_TSpiceData);
      instance.SetDelete(&delete_TSpiceData);
      instance.SetDeleteArray(&deleteArray_TSpiceData);
      instance.SetDestructor(&destruct_TSpiceData);
      instance.SetStreamerFunc(&streamer_TSpiceData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TSpiceData*)
   {
      return GenerateInitInstanceLocal((::TSpiceData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TSpiceData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TSpiceData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSpiceData::Class_Name()
{
   return "TSpiceData";
}

//______________________________________________________________________________
const char *TSpiceData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpiceData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSpiceData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TSpiceData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSpiceData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpiceData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSpiceData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TSpiceData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TSpiceData::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSpiceData.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<Int_t> &R__stl =  fSpice_Theta_DetNbr;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Theta_StripNbr;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  fSpice_Theta_Energy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Phi_DetNbr;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Phi_StripNbr;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  fSpice_Phi_Energy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TVector3> &R__stl =  fPositionFirstHit;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TVector3 R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryTheta;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryPhi;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryEnergy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  fPrimaryPdg;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  fPdg;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fEventNumber;
      R__b.CheckByteCount(R__s, R__c, TSpiceData::IsA());
   } else {
      R__c = R__b.WriteVersion(TSpiceData::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<Int_t> &R__stl =  fSpice_Theta_DetNbr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Theta_StripNbr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  fSpice_Theta_Energy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Phi_DetNbr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fSpice_Phi_StripNbr;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  fSpice_Phi_Energy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TVector3> &R__stl =  fPositionFirstHit;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TVector3>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TVector3&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryTheta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryPhi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Double_t> &R__stl =  fPrimaryEnergy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fPrimaryPdg;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fPdg;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fEventNumber;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TSpiceData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TSpiceData.
      TClass *R__cl = ::TSpiceData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Theta_DetNbr", (void*)&fSpice_Theta_DetNbr);
      R__insp.InspectMember("vector<Int_t>", (void*)&fSpice_Theta_DetNbr, "fSpice_Theta_DetNbr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Theta_StripNbr", (void*)&fSpice_Theta_StripNbr);
      R__insp.InspectMember("vector<Int_t>", (void*)&fSpice_Theta_StripNbr, "fSpice_Theta_StripNbr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Theta_Energy", (void*)&fSpice_Theta_Energy);
      R__insp.InspectMember("vector<Double_t>", (void*)&fSpice_Theta_Energy, "fSpice_Theta_Energy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Phi_DetNbr", (void*)&fSpice_Phi_DetNbr);
      R__insp.InspectMember("vector<Int_t>", (void*)&fSpice_Phi_DetNbr, "fSpice_Phi_DetNbr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Phi_StripNbr", (void*)&fSpice_Phi_StripNbr);
      R__insp.InspectMember("vector<Int_t>", (void*)&fSpice_Phi_StripNbr, "fSpice_Phi_StripNbr.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpice_Phi_Energy", (void*)&fSpice_Phi_Energy);
      R__insp.InspectMember("vector<Double_t>", (void*)&fSpice_Phi_Energy, "fSpice_Phi_Energy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPositionFirstHit", (void*)&fPositionFirstHit);
      R__insp.InspectMember("vector<TVector3>", (void*)&fPositionFirstHit, "fPositionFirstHit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryTheta", (void*)&fPrimaryTheta);
      R__insp.InspectMember("vector<Double_t>", (void*)&fPrimaryTheta, "fPrimaryTheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryPhi", (void*)&fPrimaryPhi);
      R__insp.InspectMember("vector<Double_t>", (void*)&fPrimaryPhi, "fPrimaryPhi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryEnergy", (void*)&fPrimaryEnergy);
      R__insp.InspectMember("vector<Double_t>", (void*)&fPrimaryEnergy, "fPrimaryEnergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrimaryPdg", (void*)&fPrimaryPdg);
      R__insp.InspectMember("vector<Int_t>", (void*)&fPrimaryPdg, "fPrimaryPdg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdg", (void*)&fPdg);
      R__insp.InspectMember("vector<Int_t>", (void*)&fPdg, "fPdg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNumber", &fEventNumber);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TSpiceData(void *p) {
      return  p ? new(p) ::TSpiceData : new ::TSpiceData;
   }
   static void *newArray_TSpiceData(Long_t nElements, void *p) {
      return p ? new(p) ::TSpiceData[nElements] : new ::TSpiceData[nElements];
   }
   // Wrapper around operator delete
   static void delete_TSpiceData(void *p) {
      delete ((::TSpiceData*)p);
   }
   static void deleteArray_TSpiceData(void *p) {
      delete [] ((::TSpiceData*)p);
   }
   static void destruct_TSpiceData(void *p) {
      typedef ::TSpiceData current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TSpiceData(TBuffer &buf, void *obj) {
      ((::TSpiceData*)obj)->::TSpiceData::Streamer(buf);
   }
} // end of namespace ROOT for class ::TSpiceData

namespace ROOT {
   void vectorlETVector3gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETVector3gR_Dictionary();
   static void *new_vectorlETVector3gR(void *p = 0);
   static void *newArray_vectorlETVector3gR(Long_t size, void *p);
   static void delete_vectorlETVector3gR(void *p);
   static void deleteArray_vectorlETVector3gR(void *p);
   static void destruct_vectorlETVector3gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TVector3>*)
   {
      vector<TVector3> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TVector3>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TVector3>", -2, "prec_stl/vector", 49,
                  typeid(vector<TVector3>), DefineBehavior(ptr, ptr),
                  0, &vectorlETVector3gR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TVector3>) );
      instance.SetNew(&new_vectorlETVector3gR);
      instance.SetNewArray(&newArray_vectorlETVector3gR);
      instance.SetDelete(&delete_vectorlETVector3gR);
      instance.SetDeleteArray(&deleteArray_vectorlETVector3gR);
      instance.SetDestructor(&destruct_vectorlETVector3gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TVector3> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TVector3>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETVector3gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TVector3>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETVector3gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3> : new vector<TVector3>;
   }
   static void *newArray_vectorlETVector3gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TVector3>[nElements] : new vector<TVector3>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETVector3gR(void *p) {
      delete ((vector<TVector3>*)p);
   }
   static void deleteArray_vectorlETVector3gR(void *p) {
      delete [] ((vector<TVector3>*)p);
   }
   static void destruct_vectorlETVector3gR(void *p) {
      typedef vector<TVector3> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TVector3>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* TSpiceDataDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTSpiceDataDict();

extern "C" void G__set_cpp_environmentTSpiceDataDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TSpiceData.h");
  G__cpp_reset_tagtableTSpiceDataDict();
}
#include <new>
extern "C" int G__cpp_dllrevTSpiceDataDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TSpiceData */
static int G__TSpiceDataDict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpiceData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpiceData[n];
     } else {
       p = new((void*) gvp) TSpiceData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TSpiceData;
     } else {
       p = new((void*) gvp) TSpiceData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpiceThetaEMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpiceThetaEDetectorNbr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpiceThetaEStripNbr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSpiceData*) G__getstructoffset())->GetSpiceThetaEEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpicePhiEMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpicePhiEDetectorNbr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetSpicePhiEStripNbr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSpiceData*) G__getstructoffset())->GetSpicePhiEEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((TSpiceData*) G__getstructoffset())->GetPositionFirstHit((Int_t) G__int(libp->para[0]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetEventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSpiceData*) G__getstructoffset())->GetPrimaryTheta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSpiceData*) G__getstructoffset())->GetPrimaryPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TSpiceData*) G__getstructoffset())->GetPrimaryEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetPrimaryPdg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TSpiceData*) G__getstructoffset())->GetPdg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpiceThetaEDetectorNbr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpiceThetaEStripNbr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpiceThetaEEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpicePhiEDetectorNbr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpicePhiEStripNbr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetSpicePhiEEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPositionFirstHit(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetEventNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPrimaryTheta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPrimaryPhi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPrimaryEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPrimaryPdg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->SetPdg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TSpiceData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpiceData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TSpiceData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TSpiceData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TSpiceData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpiceData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpiceData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TSpiceData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TSpiceDataDict_220_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TSpiceData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TSpiceDataDict_220_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TSpiceData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TSpiceData(*(TSpiceData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSpiceData G__TTSpiceData;
static int G__TSpiceDataDict_220_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TSpiceData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TSpiceData*) (soff+(sizeof(TSpiceData)*i)))->~G__TTSpiceData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TSpiceData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TSpiceData*) (soff))->~G__TTSpiceData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TSpiceDataDict_220_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TSpiceData* dest = (TSpiceData*) G__getstructoffset();
   *dest = *(TSpiceData*) libp->para[0].ref;
   const TSpiceData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TSpiceData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTSpiceDataDict {
 public:
  G__Sizep2memfuncTSpiceDataDict(): p(&G__Sizep2memfuncTSpiceDataDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTSpiceDataDict::*p)();
};

size_t G__get_sizep2memfuncTSpiceDataDict()
{
  G__Sizep2memfuncTSpiceDataDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTSpiceDataDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData))) {
     TSpiceData *G__Lderived;
     G__Lderived=(TSpiceData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData),G__get_linked_tagnum(&G__TSpiceDataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTSpiceDataDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVector3>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TSpiceData */
static void G__setup_memvarTSpiceData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData));
   { TSpiceData *p; p=(TSpiceData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fSpice_Theta_DetNbr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fSpice_Theta_StripNbr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSpice_Theta_Energy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fSpice_Phi_DetNbr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fSpice_Phi_StripNbr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSpice_Phi_Energy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),G__defined_typename("vector<TVector3>"),-1,4,"fPositionFirstHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fPrimaryTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fPrimaryPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fPrimaryEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fPrimaryPdg=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fPdg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TSpiceDataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTSpiceDataDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTSpiceData(void) {
   /* TSpiceData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData));
   G__memfunc_setup("TSpiceData",962,G__TSpiceDataDict_220_0_1, 105, G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__TSpiceDataDict_220_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSpiceThetaEMult",1777,G__TSpiceDataDict_220_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpiceThetaEDetectorNbr",2475,G__TSpiceDataDict_220_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpiceThetaEStripNbr",2179,G__TSpiceDataDict_220_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpiceThetaEEnergy",1977,G__TSpiceDataDict_220_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpicePhiEMult",1564,G__TSpiceDataDict_220_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpicePhiEDetectorNbr",2262,G__TSpiceDataDict_220_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpicePhiEStripNbr",1966,G__TSpiceDataDict_220_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpicePhiEEnergy",1764,G__TSpiceDataDict_220_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionFirstHit",1954,G__TSpiceDataDict_220_0_12, 117, G__get_linked_tagnum(&G__TSpiceDataDictLN_TVector3), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNumber",1419,G__TSpiceDataDict_220_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryTheta",1530,G__TSpiceDataDict_220_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryPhi",1317,G__TSpiceDataDict_220_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryEnergy",1646,G__TSpiceDataDict_220_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryPdg",1311,G__TSpiceDataDict_220_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdg",571,G__TSpiceDataDict_220_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpiceThetaEDetectorNbr",2487,G__TSpiceDataDict_220_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpiceThetaEStripNbr",2191,G__TSpiceDataDict_220_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpiceThetaEEnergy",1989,G__TSpiceDataDict_220_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpicePhiEDetectorNbr",2274,G__TSpiceDataDict_220_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpicePhiEStripNbr",1978,G__TSpiceDataDict_220_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpicePhiEEnergy",1776,G__TSpiceDataDict_220_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPositionFirstHit",1966,G__TSpiceDataDict_220_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNumber",1431,G__TSpiceDataDict_220_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryTheta",1542,G__TSpiceDataDict_220_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryPhi",1329,G__TSpiceDataDict_220_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryEnergy",1658,G__TSpiceDataDict_220_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrimaryPdg",1323,G__TSpiceDataDict_220_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPdg",583,G__TSpiceDataDict_220_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TSpiceDataDict_220_0_32, 85, G__get_linked_tagnum(&G__TSpiceDataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TSpiceData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TSpiceDataDict_220_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpiceData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TSpiceDataDict_220_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TSpiceData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TSpiceDataDict_220_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TSpiceData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TSpiceDataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TSpiceDataDict_220_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TSpiceDataDict_220_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpiceData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TSpiceDataDict_220_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpiceData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TSpiceDataDict_220_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TSpiceData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TSpiceDataDict_220_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TSpiceData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TSpiceData", 962, G__TSpiceDataDict_220_0_44, (int) ('i'), G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData), -1, 0, 1, 1, 1, 0, "u 'TSpiceData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TSpiceData", 1088, G__TSpiceDataDict_220_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TSpiceDataDict_220_0_46, (int) ('u'), G__get_linked_tagnum(&G__TSpiceDataDictLN_TSpiceData), -1, 1, 1, 1, 1, 0, "u 'TSpiceData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTSpiceDataDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTSpiceDataDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTSpiceDataDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TSpiceDataDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_TSpiceData = { "TSpiceData" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR = { "vector<TVector3,allocator<TVector3> >" , 99 , -1 };
G__linked_taginfo G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVector3,allocator<TVector3> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTSpiceDataDict() {
  G__TSpiceDataDictLN_TClass.tagnum = -1 ;
  G__TSpiceDataDictLN_TBuffer.tagnum = -1 ;
  G__TSpiceDataDictLN_TMemberInspector.tagnum = -1 ;
  G__TSpiceDataDictLN_TObject.tagnum = -1 ;
  G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TSpiceDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TSpiceDataDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TSpiceDataDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__TSpiceDataDictLN_TVector3.tagnum = -1 ;
  G__TSpiceDataDictLN_TSpiceData.tagnum = -1 ;
  G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__TSpiceDataDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR.tagnum = -1 ;
  G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTSpiceDataDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_TSpiceData),sizeof(TSpiceData),-1,29952,"SpiceData structure",G__setup_memvarTSpiceData,G__setup_memfuncTSpiceData);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR);
   G__get_linked_tagnum_fwd(&G__TSpiceDataDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupTSpiceDataDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTSpiceDataDict()");
  G__set_cpp_environmentTSpiceDataDict();
  G__cpp_setup_tagtableTSpiceDataDict();

  G__cpp_setup_inheritanceTSpiceDataDict();

  G__cpp_setup_typetableTSpiceDataDict();

  G__cpp_setup_memvarTSpiceDataDict();

  G__cpp_setup_memfuncTSpiceDataDict();
  G__cpp_setup_globalTSpiceDataDict();
  G__cpp_setup_funcTSpiceDataDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTSpiceDataDict();
  return;
}
class G__cpp_setup_initTSpiceDataDict {
  public:
    G__cpp_setup_initTSpiceDataDict() { G__add_setup_func("TSpiceDataDict",(G__incsetup)(&G__cpp_setupTSpiceDataDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTSpiceDataDict() { G__remove_setup_func("TSpiceDataDict"); }
};
G__cpp_setup_initTSpiceDataDict G__cpp_setup_initializerTSpiceDataDict;

